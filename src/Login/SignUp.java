/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Login;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.security.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.SecretKeySpec;
import java.sql.*;
import javax.swing.JOptionPane;
import java.awt.Desktop; 
//import java.security.Key;
//import java.security.KeyPair;
//import java.security.KeyPairGenerator;
//import java.security.MessageDigest;
//import java.security.NoSuchAlgorithmException;
//import java.security.SecureRandom;

/**
 *
 * @author ameya
 */
public class SignUp extends javax.swing.JFrame {

    /**
     * Creates new form SignUp
     */
    public SignUp() {
        
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPasswordField1 = new javax.swing.JPasswordField();
        jLabel3 = new javax.swing.JLabel();
        jPasswordField2 = new javax.swing.JPasswordField();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Username");

        jLabel2.setText("Password");

        jButton1.setText("SignUp");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("View Key");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel3.setText("Confirm Password ");

        jButton3.setText("Login");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton1)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addComponent(jButton2)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))
                .addGap(98, 98, 98))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton3)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jButton3)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(jPasswordField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jPasswordField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jTextField1.getAccessibleContext().setAccessibleName("username");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

 try {
     /* 1. Hash the password using MD5 
        2. Save the hashed password and username in database.
        3. Generate private and public keys using DSA 
        4. create file for public key and private key and save keys
        5. file name should start with username
     */
        boolean success;
        String username = jTextField1.getText();
        String password = new String(jPasswordField1.getPassword());
        String confirm_password = new String(jPasswordField2.getPassword());
         if (username.trim().equals(""))
         {
            JOptionPane.showMessageDialog(this, "Please enter Username !");
         } 
        else if (password.trim().equals(""))
         {
             JOptionPane.showMessageDialog(this, "Please Write Password !");
         } 
        else {    
            System.out.println(password+"password");
            System.out.println(confirm_password+"confirmpassword");
            
            if(password.equals(confirm_password)) {
               
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/mysql?digitalCoin -peerdb", "root", "root");
                String sql = "SELECT * from digitalCoin.login  WHERE username =?";
                PreparedStatement pst = con.prepareStatement(sql);
                pst.setString(1,username);
                ResultSet rs=pst.executeQuery();
                if(rs.next()){
                    JOptionPane.showMessageDialog(null,"Username already exists");
                    jTextField1.setText("");
                    jPasswordField1.setText("");   
                    jPasswordField2.setText(""); 
                    
                }
                byte[] data = password.getBytes("UTF-8");			
                MessageDigest md = MessageDigest.getInstance("MD5");
                md.update(data);
                byte[] hash = md.digest();
                String result = new String(hash);
         
                Statement stmt=(Statement)con.createStatement();
                String insert="INSERT INTO digitalCoin.login VALUES('"+username+"','"+result+"')";
                stmt.executeUpdate(insert); 
                JOptionPane.showMessageDialog(null,"Inserted Successfully!");
                String currentDir = System.getProperty("user.dir");   
                File dir=new File(currentDir+"/Keys");
             
                System.out.println(dir);
                if(!dir.exists()) {
                    success =  dir.mkdirs();
                    if (success) {
                        System.out.printf("Successfully created new directory : %s%n", dir);
                    } else {
                        System.out.printf("Failed to create new directory: %s%n", dir);
                    }
                }
                else {
                      System.out.println("Directory already exists ...");
                }
                	
                
                KeyPairGenerator dsa =  KeyPairGenerator.getInstance("DSA");
                SecureRandom random = new SecureRandom();
                dsa.initialize(1024, random);
                KeyPair keypair = dsa.generateKeyPair();
                String owner =username;
                File public_file=new File(dir,owner+"publickey.txt");
                if(!public_file.exists()){
                    public_file.createNewFile();
                }   
                FileOutputStream fos = new FileOutputStream(public_file);
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(keypair.getPublic());
                oos.close();
                fos.close();
            
                PrivateKey privateKey = (PrivateKey) keypair.getPrivate();
                byte[] key = hash;
                Key aesKey = new SecretKeySpec(key, "AES");
                Cipher cipher = Cipher.getInstance("AES");

            // encrypt the text
                cipher.init(Cipher.ENCRYPT_MODE, aesKey);
                byte[] abc = privateKey.getEncoded();
                byte[] encrypted = cipher.doFinal(abc);
                System.out.println("enc="+(new String(encrypted)));
                File private_file=new File(dir,"privatekey.txt");
                if(!private_file.exists()){
                    private_file.createNewFile();
                }
                FileOutputStream fileos = new FileOutputStream(private_file); 
                ObjectOutputStream objectos = new ObjectOutputStream(fileos);
                objectos.writeObject(encrypted);
                objectos.close();
                fileos.close();
              
            } 
            else {
                
                jPasswordField1.setText("");   
                jPasswordField2.setText("");   
                JOptionPane.showMessageDialog(null,"Password and confirm password doesnot match");
            }
        }   
        jTextField1.setText("");
        jPasswordField1.setText("");   
        jPasswordField2.setText("");    
         
        }
        catch(NoSuchAlgorithmException | IOException e){
		e.printStackTrace();
	} catch (NoSuchPaddingException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InvalidKeyException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalBlockSizeException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadPaddingException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(SignUp.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            
                String username = jTextField1.getText();
                String fileName=username;
                String currentDir = System.getProperty("user.dir");   
                File dir=new File(currentDir+"/Keys/");
                File file_read = new File(dir,fileName+"publickey.txt");
          
		if (file_read.exists()) {
 
			if (Desktop.isDesktopSupported()) {
				Desktop.getDesktop().open(file_read);
			} else {
				System.out.println("Awt Desktop is not supported!");
			}
 
		} else {
			System.out.println(file_read+"File is not exists!");
		}
 
		System.out.println("Done");
 
	  } catch (Exception ex) {
		ex.printStackTrace();
	  }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
              //new SignUp().setVisible(false);
                dispose();
                new Sample().setVisible(true);
             
// TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SignUp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
                SignUp obj = new SignUp();
                obj.setVisible(true);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPasswordField jPasswordField1;
    private javax.swing.JPasswordField jPasswordField2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
